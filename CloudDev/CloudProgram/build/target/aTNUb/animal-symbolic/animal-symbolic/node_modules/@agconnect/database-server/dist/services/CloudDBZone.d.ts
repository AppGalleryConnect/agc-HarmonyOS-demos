/**
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 */
import { CloudDBZoneQuery } from '../query/CloudDBZoneQuery';
import { CloudDBZoneSnapshot } from '../query/CloudDBZoneSnapshot';
import { TransactionFunction } from './Transaction';
import { AGCClient } from '@agconnect/common-server';
import { CloudDBService } from './CloudDBService';
import { CloudDBZoneConfig } from '../query/CloudDBZoneConfig';
import { CloudDBZoneObjectOperator } from "../query/CloudDBZoneObjectOperator";
import { CloudDBZoneObjectOperatorConstraint } from "../query/CloudDBZoneObjectOperatorConstraint";
export declare const enum RequestOperationType {
    UPSERT = "UPSERT",
    INSERT = "INSERT"
}
export declare const enum AggregateResponseKey {
    AVG = "average",
    SUM = "sum",
    MAX = "maximum",
    MIN = "minimum",
    COUNT = "count"
}
/**
 * CloudDBZone object interface.
 */
export declare class CloudDBZone extends CloudDBService {
    private readonly cloudDBZoneConfig;
    private readonly QUERIES_URL;
    private readonly TRANSACTION_QUERIES_URL;
    private readonly DATA_URL;
    private readonly ALL_DATA_URL;
    private readonly TRANSACTION_URL;
    private readonly KEY_ORDERBY_FIELD_NAME;
    private readonly KEY_ORDERBY_DIRECTION;
    private readonly UPDATE_URL;
    constructor(agcClient: AGCClient, cloudDBZoneConfig: CloudDBZoneConfig);
    /**
     * This method is used to get config of current CloudDBZone.
     *
     * @returns config of current CloudDBZone.
     */
    getCloudBDZoneConfig(): CloudDBZoneConfig;
    executeTransactionQuery<T>(cloudDBZoneQuery: CloudDBZoneQuery<T>): Promise<any>;
    private resendTransactionQuery;
    /**
     * developers use this API to insert/update specific records in a table.
     *
     * @param objectList single object/object list need to be insert/updated to database.
     * @returns promise with number.
     */
    executeUpsert<T>(objectList: T[] | T): Promise<number>;
    /**
     * developers use this API to insert specific records in a table.
     *
     * @param objectList single object/object list need to be insert to database.
     * @returns promise with number.
     */
    executeInsert<T>(objectList: T[] | T): Promise<number>;
    /**
     * developers use this API to increase field value or update specific fields in a table.
     *
     * @param operator single operator need to be updated to database.
     * @param constraint the constraint conditions of updated object.
     * @returns promise with number.
     * @throws AGConnectCloudDBException when error occur.
     */
    executeUpdate<T>(operator: CloudDBZoneObjectOperator, constraint?: CloudDBZoneObjectOperatorConstraint<T>): Promise<number>;
    private getUpdateData;
    private resendUpsertRequest;
    private resendUpdateRequest;
    private static checkInputData;
    private formData;
    /**
     * developers use this API to delete specific records in a table.
     *
     * @param objectList single object/object list need to be deleted from database.
     * @returns promise with number.
     */
    executeDelete<T>(objectList: T[] | T): Promise<number>;
    /**
     * developers use this API to delete all records in a table.
     *
     * @param clazz the object needs to be deleted from database.
     * @returns promise with number.
     */
    executeDeleteAll<T>(clazz: new () => T): Promise<number>;
    /**
     * developers use this API to select a table by a cloudDBZoneQuery.
     *
     * @param cloudDBZoneQuery cloudDBZoneQuery user construct using api, such as where, equalTo...
     * @returns promise with object list queried from table.
     */
    executeQuery<T>(cloudDBZoneQuery: CloudDBZoneQuery<T>): Promise<CloudDBZoneSnapshot<T>>;
    /**
     * developers use this API to get an average result from CloudDBZone by a cloudDBZoneQuery.
     *
     * @param cloudDBZoneQuery user construct a cloudDBZoneQuery using api, such as where, equalTo...
     * @param fieldName user choose one field to query.
     * @returns promise with number.
     */
    executeAverageQuery<T>(cloudDBZoneQuery: CloudDBZoneQuery<T>, fieldName: string): Promise<number>;
    /**
     * developers use this API to get a sum result from CloudDBZone by a cloudDBZoneQuery.
     *
     * @param cloudDBZoneQuery user construct a cloudDBZoneQuery using api, such as where, equalTo...
     * @param fieldName user choose one field to query.
     * @returns promise with number.
     */
    executeSumQuery<T>(cloudDBZoneQuery: CloudDBZoneQuery<T>, fieldName: string): Promise<number>;
    /**
     * developers use this API to get a maximum result from CloudDBZone by a cloudDBZoneQuery.
     *
     * @param cloudDBZoneQuery user construct a cloudDBZoneQuery using api, such as where, equalTo...
     * @param fieldName user choose one field to query.
     * @returns promise with number.
     */
    executeMaximumQuery<T>(cloudDBZoneQuery: CloudDBZoneQuery<T>, fieldName: string): Promise<number>;
    /**
     * developers use this API to get minimum result from CloudDBZone by a cloudDBZoneQuery.
     *
     * @param cloudDBZoneQuery user construct a cloudDBZoneQuery using api, such as where, equalTo...
     * @param fieldName user choose one field to query.
     * @returns promise with number.
     */
    executeMinimalQuery<T>(cloudDBZoneQuery: CloudDBZoneQuery<T>, fieldName: string): Promise<number>;
    /**
     * developers use this API to get count result from CloudDBZone by a cloudDBZoneQuery.
     *
     * @param cloudDBZoneQuery user construct a cloudDBZoneQuery using api, such as where, equalTo...
     * @param fieldName user choose our field to query.
     * @returns promise with number.
     */
    executeCountQuery<T>(cloudDBZoneQuery: CloudDBZoneQuery<T>, fieldName: string): Promise<number>;
    /**
     * developers use this API to execute a transaction in cloud size.
     *
     * @param transactionFunction the transactionFunction.
     * @returns promise with boolean.
     */
    runTransaction(transactionFunction: TransactionFunction): Promise<boolean>;
    private getCloudDBZoneResult;
    private static verifyTransaction;
    private getTransactionResult;
    private resendGetTransactionResult;
    private verifyPaginationQuery;
    private checkPaginationEqualTo;
    private static checkPaginationOrderBy;
    private getIndexByQueryCondition;
    private static checkAggregateQueryInput;
    private static responseCheck;
    private static aggregateResponseCheck;
    private getAllOrderBys;
    private isPaginationQuery;
    private objectListTransform;
    private aggregateQueryResponse;
    private resendAggregateQuery;
    private formAggregateQueryData;
    private checkOperator;
    private static getPrimaryKeys;
    private static checkConstraint;
    private handleData;
}
