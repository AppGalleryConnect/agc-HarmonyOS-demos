/**
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 */
import { CloudDBZoneQuery } from "../query/CloudDBZoneQuery";
import { CloudDBZone } from "./CloudDBZone";
export declare type Operation = {
    operationType: OperationType;
    objectTypeName: string;
    objects: unknown[];
};
export declare type verifyObject = {
    objectTypeName: string;
    objects: unknown[];
};
export declare type verifyMapObject = {
    objectTypeName: string;
    clazz: any;
    objects: unknown[];
};
/**
 * Transaction is a class that describe a transaction supplied to user, there are executeQuery,
 * executeUpsert, executeDelete operation in transaction; all operation called in a transaction object.
 */
export declare class Transaction {
    needVerifyObjectsList: any[];
    transactionList: Operation[];
    private cloudDBZone;
    private needVerifyObjectMap;
    private needVerifyDataNum;
    private queryDataLength;
    constructor(cloudDBZone: CloudDBZone);
    /**
     * developers use this API to select a table by a naturalStoreQuery in a transaction.
     *
     * @param cloudDBZoneQuery user construct a naturalStoreQuery using api. such as where, equalTo...
     * @returns list of T.
     */
    executeQuery<T>(cloudDBZoneQuery: CloudDBZoneQuery<T>): Promise<T[]>;
    private checkQueryData;
    private static getVersionData;
    /**
     * developers use this API to upsert specific records in a table.
     *
     * @param objectList object list need to be deleted from database.
     * @returns promise with Transaction itself.
     */
    executeUpsert<T>(objectList: T[]): Transaction;
    /**
     * developers use this API to delete specific records in a table.
     *
     * @param objectList object list need to be deleted from database.
     * @returns promise with Transaction itself.
     */
    executeDelete<T>(objectList: T[]): Transaction;
    private static checkInputData;
    formTransactionData(objectList: any[], operationType: OperationType): Operation;
    release(): void;
    isTransactionEmpty(): boolean;
    sortVerifyObjectsList(): void;
}
export declare enum OperationType {
    UPSERT = "Upsert",
    DELETE = "Delete"
}
export interface TransactionFunction {
    /**
     * apply implemented by user
     *
     * @param transaction enter transaction
     * @returns boolean value
     */
    apply(transaction: Transaction): Promise<boolean>;
}
