"use strict";
/**
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 */
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudDBZoneQuery = void 0;
var AGConnectCloudDBException_1 = require("../exception/AGConnectCloudDBException");
var CloudDBErrorCode_1 = require("../exception/CloudDBErrorCode");
var FieldType_1 = require("../utils/FieldType");
var Utils_1 = require("../utils/Utils");
var DataModelHelper_1 = require("../utils/DataModelHelper");
/**
 * CloudDBZoneQuery describe how to select objects from cloudDBZone.
 */
var CloudDBZoneQuery = /** @class */ (function () {
    function CloudDBZoneQuery(clazz) {
        this.paginationObject = null;
        this.UID_MAX_SIZE = 100;
        this.queryConditions = [];
        this.clazz = clazz;
        var myObject = new clazz();
        this.fieldTypeMap = myObject.getFieldTypeMap();
        this.encryptedFieldList = myObject.getEncryptedFieldList();
    }
    /**
     * Instantiate a CloudDBZoneQuery object.
     *
     * @param clazz The class used to be compared.
     * @returns A cloudDBZoneQuery
     */
    CloudDBZoneQuery.where = function (clazz) {
        if (!clazz) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_VALUE_IS_NULL).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_VALUE_IS_NULL);
        }
        Utils_1.Utils.clazzCheck(clazz);
        return new CloudDBZoneQuery(clazz);
    };
    CloudDBZoneQuery.prototype.addCondition = function (conditionType, fieldName, value) {
        var conditionObject = {};
        conditionObject.fieldName = fieldName;
        conditionObject.conditionType = conditionType;
        conditionObject.value = value;
        this.queryConditions.push(conditionObject);
    };
    CloudDBZoneQuery.prototype.addPaginationCondition = function (conditionType, value) {
        var conditionObject = {};
        conditionObject.conditionType = conditionType;
        conditionObject.value = value;
        this.queryConditions.push(conditionObject);
    };
    CloudDBZoneQuery.prototype.addOrderByCondition = function (fieldName, direction) {
        var conditionObject = {};
        conditionObject.fieldName = fieldName;
        conditionObject.conditionType = "OrderBy" /* ORDER_BY */;
        conditionObject.value = direction;
        this.queryConditions.push(conditionObject);
    };
    /**
     * Add equal to condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.equalTo = function (fieldName, value) {
        this.checkFieldValid(fieldName);
        this.checkByteArray(fieldName);
        this.checkFieldValue(fieldName, value);
        this.checkIllegalCharacter(fieldName, value);
        this.addCondition("EqualTo" /* EQUAL_TO */, fieldName, value);
        return this;
    };
    /**
     * Add beginWith to condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.beginsWith = function (fieldName, value) {
        this.checkFieldValid(fieldName);
        this.checkStringAndText(fieldName);
        this.checkFieldValue(fieldName, value);
        this.checkIllegalCharacter(fieldName, value);
        this.addCondition("BeginsWith" /* BEGINS_WITH */, fieldName, value);
        return this;
    };
    /**
     * Add endsWith to condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.endsWith = function (fieldName, value) {
        this.checkFieldValid(fieldName);
        this.checkStringAndText(fieldName);
        this.checkFieldValue(fieldName, value);
        this.checkIllegalCharacter(fieldName, value);
        this.addCondition("EndsWith" /* ENDS_WITH */, fieldName, value);
        return this;
    };
    /**
     * Add contains to condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.contains = function (fieldName, value) {
        this.checkFieldValid(fieldName);
        this.checkStringAndText(fieldName);
        this.checkFieldValue(fieldName, value);
        this.checkIllegalCharacter(fieldName, value);
        this.addCondition("Contains" /* CONTAINS */, fieldName, value);
        return this;
    };
    /**
     * Add not equal to condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.notEqualTo = function (fieldName, value) {
        this.checkFieldValid(fieldName);
        this.checkByteArray(fieldName);
        this.checkFieldValue(fieldName, value);
        this.checkIllegalCharacter(fieldName, value);
        this.addCondition("NotEqualTo" /* NOT_EQUAL_TO */, fieldName, value);
        return this;
    };
    /**
     * Add greater than condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.greaterThan = function (fieldName, value) {
        this.checkFieldValid(fieldName);
        this.checkByteArrayAndBoolean(fieldName);
        this.checkFieldValue(fieldName, value);
        this.checkIllegalCharacter(fieldName, value);
        this.addCondition("GreaterThan" /* GREATER_THAN */, fieldName, value);
        return this;
    };
    /**
     * Add greater than or equal to condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.greaterThanOrEqualTo = function (fieldName, value) {
        this.checkFieldValid(fieldName);
        this.checkByteArrayAndBoolean(fieldName);
        this.checkFieldValue(fieldName, value);
        this.checkIllegalCharacter(fieldName, value);
        this.addCondition("GreaterThanOrEqualTo" /* GREATER_THAN_OR_EQUAL_TO */, fieldName, value);
        return this;
    };
    /**
     * Add less than to condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.lessThan = function (fieldName, value) {
        this.checkFieldValid(fieldName);
        this.checkByteArrayAndBoolean(fieldName);
        this.checkFieldValue(fieldName, value);
        this.checkIllegalCharacter(fieldName, value);
        this.addCondition("LessThan" /* LESS_THAN */, fieldName, value);
        return this;
    };
    /**
     * Add less than or equal to condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.lessThanOrEqualTo = function (fieldName, value) {
        this.checkFieldValid(fieldName);
        this.checkByteArrayAndBoolean(fieldName);
        this.checkFieldValue(fieldName, value);
        this.checkIllegalCharacter(fieldName, value);
        this.addCondition("LessThanOrEqualTo" /* LESS_THAN_OR_EQUAL_TO */, fieldName, value);
        return this;
    };
    /**
     * Add in condition for array.
     *
     * @param fieldName The name of the field used for being compared.
     * @param values The value array of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.in = function (fieldName, values) {
        this.checkFieldValid(fieldName);
        this.checkByteArrayAndBoolean(fieldName);
        this.checkFieldValue.apply(this, __spreadArray([fieldName], __read(values)));
        for (var i = 0; i < values.length; i++) {
            this.checkIllegalCharacter(fieldName, values[i]);
        }
        this.addCondition("In" /* IN */, fieldName, values);
        return this;
    };
    /**
     * Add isNull condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.isNull = function (fieldName) {
        this.checkFieldValid(fieldName);
        this.addCondition("IsNull" /* IS_NULL */, fieldName);
        return this;
    };
    /**
     * Add isNotNull condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.isNotNull = function (fieldName) {
        this.checkFieldValid(fieldName);
        this.addCondition("IsNotNull" /* IS_NOT_NULL */, fieldName);
        return this;
    };
    /**
     * Add order by asc condition.
     *
     * @param fieldName The name of the field used for order.
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.orderByAsc = function (fieldName) {
        this.checkFieldValid(fieldName);
        this.addOrderByCondition(fieldName, "asc" /* ASCEND */);
        return this;
    };
    /**
     * Add order by desc condition.
     *
     * @param fieldName The name of the field used for order.
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.orderByDesc = function (fieldName) {
        this.checkFieldValid(fieldName);
        this.addOrderByCondition(fieldName, "desc" /* DESCEND */);
        return this;
    };
    /**
     * Add limit condition.
     *
     * @param count the limit number.
     * @param offset the offset number, this parameter is optional.
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.limit = function (count, offset) {
        if ((!count && count != 0) || offset === null || (offset !== undefined && isNaN(offset))) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_VALUE_IS_NULL).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_VALUE_IS_NULL);
        }
        if (count < 0 || (offset !== undefined && offset < 0)) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INPUT_LIMIT_OR_OFFSET_LESS_THAN_ZERO).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INPUT_LIMIT_OR_OFFSET_LESS_THAN_ZERO);
        }
        var limitObject = { offset: offset, number: count };
        this.queryConditions = this.queryConditions.filter(function (obj) { return obj.conditionType !== "Limit" /* LIMIT */; });
        this.addCondition("Limit" /* LIMIT */, null, limitObject);
        return this;
    };
    /**
     * Add startAt condition.
     *
     * @param queryObject the Object used for comparing
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.startAt = function (queryObject) {
        this.checkObject(queryObject);
        Utils_1.Utils.checkIllegalCharacter(queryObject);
        this.addPaginationCondition("StartAt" /* START_AT */, queryObject);
        return this;
    };
    /**
     * Add startAfter condition.
     *
     * @param queryObject the Object used for comparing
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.startAfter = function (queryObject) {
        this.checkObject(queryObject);
        Utils_1.Utils.checkIllegalCharacter(queryObject);
        this.addPaginationCondition("StartAfter" /* START_AFTER */, queryObject);
        return this;
    };
    /**
     * Add EndAt condition.
     *
     * @param queryObject the Object used for comparing
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.endAt = function (queryObject) {
        this.checkObject(queryObject);
        Utils_1.Utils.checkIllegalCharacter(queryObject);
        this.addPaginationCondition("EndAt" /* END_AT */, queryObject);
        return this;
    };
    /**
     * Add EndBefore condition.
     *
     * @param queryObject the Object used for comparing
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.endBefore = function (queryObject) {
        this.checkObject(queryObject);
        Utils_1.Utils.checkIllegalCharacter(queryObject);
        this.addPaginationCondition("EndBefore" /* END_BEFORE */, queryObject);
        return this;
    };
    /**
     * Add byUid condition.
     *
     * @param uid the uid used for quering.
     * @returns CloudDBZoneQuery itself.
     */
    CloudDBZoneQuery.prototype.byUid = function (uid) {
        if (!uid) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_VALUE_IS_NULL).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_VALUE_IS_NULL);
        }
        if (uid.length > this.UID_MAX_SIZE) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.USERID_IS_INVALID).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.USERID_IS_INVALID);
        }
        var conditionObject = {};
        conditionObject.conditionType = "Uid" /* UID */;
        conditionObject.value = uid;
        this.queryConditions.push(conditionObject);
        return this;
    };
    /**
     * Get class of query object.
     *
     * @returns class of query object.
     */
    CloudDBZoneQuery.prototype.getClazz = function () {
        return this.clazz;
    };
    /**
     * Get query conditions of CloudDBZoneQuery.
     *
     * @returns queryConditions.
     */
    CloudDBZoneQuery.prototype.getQueryConditions = function () {
        return Utils_1.Utils.deepCopy(this.queryConditions);
    };
    CloudDBZoneQuery.prototype.checkFieldValid = function (fieldName) {
        if (!fieldName) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_FIELD_NAME_IS_NULL).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_FIELD_NAME_IS_NULL);
        }
        if (!this.fieldTypeMap.has(fieldName)) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_FIELD_NAME_DO_NOT_EXIST).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_FIELD_NAME_DO_NOT_EXIST);
        }
        if (this.encryptedFieldList.includes(fieldName)) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ENCRYPTED_FIELD_NOT_SUPPORT_QUERY).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ENCRYPTED_FIELD_NOT_SUPPORT_QUERY);
        }
    };
    CloudDBZoneQuery.prototype.checkFieldValue = function (fieldName) {
        var e_1, _a;
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        var fieldType = this.fieldTypeMap.get(fieldName);
        if (fieldType === FieldType_1.FieldType.ByteArray) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DO_NOT_SUPPORT_BYTEARRAY).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DO_NOT_SUPPORT_BYTEARRAY);
        }
        try {
            for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
                var value = values_1_1.value;
                if (value === undefined || value === null) {
                    console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_VALUE_IS_NULL).message);
                    throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_VALUE_IS_NULL);
                }
                if (!DataModelHelper_1.DataModelHelper.validateQueryFieldValue(fieldType, value)) {
                    console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_CODE_DATA_INVALID).message);
                    throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_CODE_DATA_INVALID);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    CloudDBZoneQuery.prototype.checkObject = function (queryObject) {
        if (!queryObject) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_QUERY_OBJECT_IS_NULL).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_QUERY_OBJECT_IS_NULL);
        }
        if (!DataModelHelper_1.DataModelHelper.validate(queryObject, true)) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_CODE_DATA_INVALID).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_CODE_DATA_INVALID);
        }
        if (this.paginationObject) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PAGINATE_QUERY_INPUT_IS_MORE_THAN_ONE).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PAGINATE_QUERY_INPUT_IS_MORE_THAN_ONE);
        }
        this.paginationObject = queryObject;
    };
    CloudDBZoneQuery.prototype.checkByteArray = function (fieldName) {
        if (this.fieldTypeMap.get(fieldName) === FieldType_1.FieldType.ByteArray) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DO_NOT_SUPPORT_BYTEARRAY).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DO_NOT_SUPPORT_BYTEARRAY);
        }
    };
    CloudDBZoneQuery.prototype.checkByteArrayAndBoolean = function (fieldName) {
        var fieldType = this.fieldTypeMap.get(fieldName);
        if (fieldType === FieldType_1.FieldType.Boolean || fieldType === FieldType_1.FieldType.ByteArray) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DO_NOT_SUPPORT_BYTEARRAY_OR_BOOLEAN).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DO_NOT_SUPPORT_BYTEARRAY_OR_BOOLEAN);
        }
    };
    CloudDBZoneQuery.prototype.checkStringAndText = function (fieldName) {
        var fieldType = this.fieldTypeMap.get(fieldName);
        if (fieldType !== FieldType_1.FieldType.Text && fieldType !== FieldType_1.FieldType.String) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ONLY_SUPPORT_TEXT_AND_STRING).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ONLY_SUPPORT_TEXT_AND_STRING);
        }
    };
    CloudDBZoneQuery.prototype.checkIllegalCharacter = function (fieldName, value) {
        var fieldType = this.fieldTypeMap.get(fieldName);
        if (fieldType == FieldType_1.FieldType.Text || fieldType == FieldType_1.FieldType.String) {
            if (value == null) {
                return;
            }
            if (value.indexOf('\0') !== -1) {
                console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INPUT_CONTAIN_ILLEGAL_CHARACTER).message);
                throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INPUT_CONTAIN_ILLEGAL_CHARACTER);
            }
        }
    };
    return CloudDBZoneQuery;
}());
exports.CloudDBZoneQuery = CloudDBZoneQuery;
