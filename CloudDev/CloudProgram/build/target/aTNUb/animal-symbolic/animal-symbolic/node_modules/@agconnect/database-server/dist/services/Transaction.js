"use strict";
/**
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.OperationType = exports.Transaction = void 0;
var AGConnectCloudDBException_1 = require("../exception/AGConnectCloudDBException");
var Utils_1 = require("../utils/Utils");
var CloudDBErrorCode_1 = require("../exception/CloudDBErrorCode");
var MAX_QUERY_OBJECT_NUM = 1000;
var MAX_QUERY_OBJECT_LIST_CAPACITY = 20 * 1024 * 1024;
var KEY_NATURALBASE_VSERSION = 'naturalbase_version';
/**
 * Transaction is a class that describe a transaction supplied to user, there are executeQuery,
 * executeUpsert, executeDelete operation in transaction; all operation called in a transaction object.
 */
var Transaction = /** @class */ (function () {
    function Transaction(cloudDBZone) {
        this.needVerifyObjectsList = [];
        this.transactionList = [];
        this.needVerifyObjectMap = new Map();
        this.needVerifyDataNum = 0;
        this.queryDataLength = 0;
        this.cloudDBZone = cloudDBZone;
    }
    /**
     * developers use this API to select a table by a naturalStoreQuery in a transaction.
     *
     * @param cloudDBZoneQuery user construct a naturalStoreQuery using api. such as where, equalTo...
     * @returns list of T.
     */
    Transaction.prototype.executeQuery = function (cloudDBZoneQuery) {
        return __awaiter(this, void 0, void 0, function () {
            var objectData, clazz, myObj, verifyObjects, concatArr, needVerifyObject, fieldTypeMap, deserializeObjects;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!cloudDBZoneQuery) {
                            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.VALUE_IS_NULL).message);
                            return [2 /*return*/, Promise.reject(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.VALUE_IS_NULL))];
                        }
                        if (this.transactionList.length > 0) {
                            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_CODE_TRANSACTION_SEQUENCE_INCORRECT).message);
                            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_CODE_TRANSACTION_SEQUENCE_INCORRECT);
                        }
                        return [4 /*yield*/, this.cloudDBZone.executeTransactionQuery(cloudDBZoneQuery)];
                    case 1:
                        objectData = _a.sent();
                        this.checkQueryData(objectData);
                        clazz = cloudDBZoneQuery.getClazz();
                        myObj = new clazz();
                        verifyObjects = Transaction.getVersionData(objectData, myObj.getPrimaryKeyList());
                        if (this.needVerifyObjectMap.has(myObj.getClassName())) {
                            concatArr = this.needVerifyObjectMap.get(myObj.getClassName()).objects.concat(verifyObjects);
                            this.needVerifyObjectMap.get(myObj.getClassName()).objects = concatArr;
                        }
                        else {
                            needVerifyObject = {
                                objectTypeName: myObj.getClassName(),
                                clazz: myObj,
                                objects: verifyObjects
                            };
                            this.needVerifyObjectMap.set(myObj.getClassName(), needVerifyObject);
                        }
                        fieldTypeMap = myObj.getFieldTypeMap();
                        deserializeObjects = Utils_1.Utils.deserializeObjects(objectData, fieldTypeMap, clazz);
                        return [2 /*return*/, Promise.resolve(deserializeObjects)];
                }
            });
        });
    };
    Transaction.prototype.checkQueryData = function (objectData) {
        if (!objectData) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.FAIL_TO_PARSE_QUERY_DATA).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.FAIL_TO_PARSE_QUERY_DATA);
        }
        if (objectData.length > MAX_QUERY_OBJECT_NUM) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_QUERY_DATA_COUNT_TOO_LARGE).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_QUERY_DATA_COUNT_TOO_LARGE);
        }
        this.needVerifyDataNum += objectData.length;
        if (this.needVerifyDataNum > MAX_QUERY_OBJECT_NUM) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_QUERY_DATA_COUNT_TOO_LARGE).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_QUERY_DATA_COUNT_TOO_LARGE);
        }
        this.queryDataLength += JSON.stringify(objectData).length;
        if (this.queryDataLength > MAX_QUERY_OBJECT_LIST_CAPACITY) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_QUERY_DATA_SIZE_TOO_LARGE).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_QUERY_DATA_SIZE_TOO_LARGE);
        }
    };
    Transaction.getVersionData = function (objectData, primaryKeyList) {
        var e_1, _a, e_2, _b;
        var arrayData = [];
        try {
            for (var objectData_1 = __values(objectData), objectData_1_1 = objectData_1.next(); !objectData_1_1.done; objectData_1_1 = objectData_1.next()) {
                var data = objectData_1_1.value;
                var object = {};
                try {
                    for (var primaryKeyList_1 = (e_2 = void 0, __values(primaryKeyList)), primaryKeyList_1_1 = primaryKeyList_1.next(); !primaryKeyList_1_1.done; primaryKeyList_1_1 = primaryKeyList_1.next()) {
                        var primaryKey = primaryKeyList_1_1.value;
                        var value = data[primaryKey];
                        if (value === null) {
                            console.warn('the primaryKey data is null');
                            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PARAMETER_INVALID);
                        }
                        object[primaryKey] = value;
                    }
                }
                catch (e_2_1) { e_2 = { error: e_2_1 }; }
                finally {
                    try {
                        if (primaryKeyList_1_1 && !primaryKeyList_1_1.done && (_b = primaryKeyList_1.return)) _b.call(primaryKeyList_1);
                    }
                    finally { if (e_2) throw e_2.error; }
                }
                var version = data[KEY_NATURALBASE_VSERSION];
                if (!version) {
                    console.warn('the version data is null');
                    throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PARAMETER_INVALID);
                }
                object[KEY_NATURALBASE_VSERSION] = version;
                arrayData.push(object);
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (objectData_1_1 && !objectData_1_1.done && (_a = objectData_1.return)) _a.call(objectData_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        return arrayData;
    };
    /**
     * developers use this API to upsert specific records in a table.
     *
     * @param objectList object list need to be deleted from database.
     * @returns promise with Transaction itself.
     */
    Transaction.prototype.executeUpsert = function (objectList) {
        Transaction.checkInputData(objectList);
        if (objectList.length === 0) {
            return this;
        }
        Utils_1.Utils.checkSchemaAndDataSize(objectList);
        this.transactionList.push(this.formTransactionData(objectList, OperationType.UPSERT));
        return this;
    };
    /**
     * developers use this API to delete specific records in a table.
     *
     * @param objectList object list need to be deleted from database.
     * @returns promise with Transaction itself.
     */
    Transaction.prototype.executeDelete = function (objectList) {
        Transaction.checkInputData(objectList);
        if (objectList.length === 0) {
            return this;
        }
        Utils_1.Utils.checkSchemaAndDataSize(objectList);
        this.transactionList.push(this.formTransactionData(objectList, OperationType.DELETE));
        return this;
    };
    Transaction.checkInputData = function (objectList) {
        if (!objectList) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.VALUE_IS_NULL).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.VALUE_IS_NULL);
        }
        if (!Utils_1.Utils.isArray(objectList)) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PARAMETER_INVALID).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PARAMETER_INVALID);
        }
        for (var i = 0; i < objectList.length; i++) {
            if (objectList[i] == null) {
                var exception = new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.VALUE_IS_NULL);
                console.warn(exception.message);
                throw exception;
            }
        }
    };
    Transaction.prototype.formTransactionData = function (objectList, operationType) {
        return {
            operationType: operationType,
            objectTypeName: objectList[0].getClassName(),
            objects: Utils_1.Utils.serializeObjects(objectList)
        };
    };
    Transaction.prototype.release = function () {
        this.needVerifyObjectsList = [];
        this.transactionList = [];
        this.needVerifyObjectMap = new Map();
        this.needVerifyDataNum = 0;
        this.queryDataLength = 0;
    };
    Transaction.prototype.isTransactionEmpty = function () {
        var e_3, _a;
        var isEmpty = true;
        try {
            for (var _b = __values(this.transactionList), _c = _b.next(); !_c.done; _c = _b.next()) {
                var operation = _c.value;
                if (operation.objects.length > 0) {
                    isEmpty = false;
                    break;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return isEmpty;
    };
    Transaction.prototype.sortVerifyObjectsList = function () {
        var e_4, _a;
        var convertedList = Array.from(this.needVerifyObjectMap.values());
        convertedList.sort(function (o1, o2) {
            return o1.objectTypeName.localeCompare(o2.objectTypeName);
        });
        convertedList.forEach(function (value) {
            var primaryKeyList = value.clazz.getPrimaryKeyList();
            var fieldTypeMap = value.clazz.getFieldTypeMap();
            value.objects.sort(function (o1, o2) {
                var e_5, _a;
                try {
                    for (var primaryKeyList_2 = __values(primaryKeyList), primaryKeyList_2_1 = primaryKeyList_2.next(); !primaryKeyList_2_1.done; primaryKeyList_2_1 = primaryKeyList_2.next()) {
                        var primaryKey = primaryKeyList_2_1.value;
                        var fieldType = fieldTypeMap.get(primaryKey);
                        var res = Utils_1.Utils.primaryKeyCompareTo(o1[primaryKey], o2[primaryKey], fieldType);
                        if (res != 0)
                            return res;
                    }
                }
                catch (e_5_1) { e_5 = { error: e_5_1 }; }
                finally {
                    try {
                        if (primaryKeyList_2_1 && !primaryKeyList_2_1.done && (_a = primaryKeyList_2.return)) _a.call(primaryKeyList_2);
                    }
                    finally { if (e_5) throw e_5.error; }
                }
                return 0;
            });
        });
        try {
            for (var convertedList_1 = __values(convertedList), convertedList_1_1 = convertedList_1.next(); !convertedList_1_1.done; convertedList_1_1 = convertedList_1.next()) {
                var value = convertedList_1_1.value;
                this.needVerifyObjectsList.push({
                    objectTypeName: value.objectTypeName,
                    objects: value.objects
                });
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (convertedList_1_1 && !convertedList_1_1.done && (_a = convertedList_1.return)) _a.call(convertedList_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
    };
    return Transaction;
}());
exports.Transaction = Transaction;
var OperationType;
(function (OperationType) {
    OperationType["UPSERT"] = "Upsert";
    OperationType["DELETE"] = "Delete";
})(OperationType = exports.OperationType || (exports.OperationType = {}));
