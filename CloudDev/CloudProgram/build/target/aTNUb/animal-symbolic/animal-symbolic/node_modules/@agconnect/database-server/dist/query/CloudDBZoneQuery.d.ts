/**
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 */
/**
 * CloudDBZoneQuery describe how to select objects from cloudDBZone.
 */
export declare class CloudDBZoneQuery<T> {
    private queryConditions;
    private encryptedFieldList;
    private fieldTypeMap;
    private clazz;
    private paginationObject;
    private readonly UID_MAX_SIZE;
    private constructor();
    /**
     * Instantiate a CloudDBZoneQuery object.
     *
     * @param clazz The class used to be compared.
     * @returns A cloudDBZoneQuery
     */
    static where<T>(clazz: new () => T): CloudDBZoneQuery<T>;
    private addCondition;
    private addPaginationCondition;
    private addOrderByCondition;
    /**
     * Add equal to condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    equalTo(fieldName: string, value: any): CloudDBZoneQuery<T>;
    /**
     * Add beginWith to condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    beginsWith(fieldName: string, value: any): CloudDBZoneQuery<T>;
    /**
     * Add endsWith to condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    endsWith(fieldName: string, value: any): CloudDBZoneQuery<T>;
    /**
     * Add contains to condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    contains(fieldName: string, value: any): CloudDBZoneQuery<T>;
    /**
     * Add not equal to condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    notEqualTo(fieldName: string, value: any): CloudDBZoneQuery<T>;
    /**
     * Add greater than condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    greaterThan(fieldName: string, value: any): CloudDBZoneQuery<T>;
    /**
     * Add greater than or equal to condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    greaterThanOrEqualTo(fieldName: string, value: any): CloudDBZoneQuery<T>;
    /**
     * Add less than to condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    lessThan(fieldName: string, value: any): CloudDBZoneQuery<T>;
    /**
     * Add less than or equal to condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    lessThanOrEqualTo(fieldName: string, value: any): CloudDBZoneQuery<T>;
    /**
     * Add in condition for array.
     *
     * @param fieldName The name of the field used for being compared.
     * @param values The value array of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    in(fieldName: string, values: any[]): CloudDBZoneQuery<T>;
    /**
     * Add isNull condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    isNull(fieldName: string): CloudDBZoneQuery<T>;
    /**
     * Add isNotNull condition for value.
     *
     * @param fieldName The name of the field used for being compared.
     * @returns CloudDBZoneQuery itself.
     */
    isNotNull(fieldName: string): CloudDBZoneQuery<T>;
    /**
     * Add order by asc condition.
     *
     * @param fieldName The name of the field used for order.
     * @returns CloudDBZoneQuery itself.
     */
    orderByAsc(fieldName: string): CloudDBZoneQuery<T>;
    /**
     * Add order by desc condition.
     *
     * @param fieldName The name of the field used for order.
     * @returns CloudDBZoneQuery itself.
     */
    orderByDesc(fieldName: string): CloudDBZoneQuery<T>;
    /**
     * Add limit condition.
     *
     * @param count the limit number.
     * @param offset the offset number, this parameter is optional.
     * @returns CloudDBZoneQuery itself.
     */
    limit(count: number, offset?: number): CloudDBZoneQuery<T>;
    /**
     * Add startAt condition.
     *
     * @param queryObject the Object used for comparing
     * @returns CloudDBZoneQuery itself.
     */
    startAt(queryObject: T): CloudDBZoneQuery<T>;
    /**
     * Add startAfter condition.
     *
     * @param queryObject the Object used for comparing
     * @returns CloudDBZoneQuery itself.
     */
    startAfter(queryObject: T): CloudDBZoneQuery<T>;
    /**
     * Add EndAt condition.
     *
     * @param queryObject the Object used for comparing
     * @returns CloudDBZoneQuery itself.
     */
    endAt(queryObject: T): CloudDBZoneQuery<T>;
    /**
     * Add EndBefore condition.
     *
     * @param queryObject the Object used for comparing
     * @returns CloudDBZoneQuery itself.
     */
    endBefore(queryObject: T): CloudDBZoneQuery<T>;
    /**
     * Add byUid condition.
     *
     * @param uid the uid used for quering.
     * @returns CloudDBZoneQuery itself.
     */
    byUid(uid: string): CloudDBZoneQuery<T>;
    /**
     * Get class of query object.
     *
     * @returns class of query object.
     */
    getClazz(): new () => T;
    /**
     * Get query conditions of CloudDBZoneQuery.
     *
     * @returns queryConditions.
     */
    getQueryConditions(): any[];
    private checkFieldValid;
    private checkFieldValue;
    private checkObject;
    private checkByteArray;
    private checkByteArrayAndBoolean;
    private checkStringAndText;
    private checkIllegalCharacter;
}
