"use strict";
/**
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudDBZoneObjectOperatorConstraint = void 0;
var AGConnectCloudDBException_1 = require("../exception/AGConnectCloudDBException");
var CloudDBErrorCode_1 = require("../exception/CloudDBErrorCode");
var ConditionValidate_1 = require("../utils/ConditionValidate");
var CloudDBZoneObjectOperatorConstraint = /** @class */ (function () {
    function CloudDBZoneObjectOperatorConstraint(clazz) {
        this.clazz = clazz;
        this.conditions = [];
        this.conditionValidate = new ConditionValidate_1.ConditionValidate(clazz);
    }
    /**
     * Instantiate a CloudDBZoneObjectOperatorConstraint object.
     *
     * @param clazz The object type class.
     * @returns The `CloudDBZoneObjectOperatorConstraint` instance of clazz.
     */
    CloudDBZoneObjectOperatorConstraint.where = function (clazz) {
        if (!clazz) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_VALUE_IS_NULL).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_VALUE_IS_NULL);
        }
        return new CloudDBZoneObjectOperatorConstraint(clazz);
    };
    /**
     * Add beginWiths condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    CloudDBZoneObjectOperatorConstraint.prototype.beginsWith = function (fieldName, value) {
        this.addCondition("BeginsWith" /* BEGINS_WITH */, fieldName, value);
        return this;
    };
    /**
     * Add endsWiths condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    CloudDBZoneObjectOperatorConstraint.prototype.endsWith = function (fieldName, value) {
        this.addCondition("EndsWith" /* ENDS_WITH */, fieldName, value);
        return this;
    };
    /**
     * Add contains condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    CloudDBZoneObjectOperatorConstraint.prototype.contains = function (fieldName, value) {
        this.addCondition("Contains" /* CONTAINS */, fieldName, value);
        return this;
    };
    /**
     * Add equalTo condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    CloudDBZoneObjectOperatorConstraint.prototype.equalTo = function (fieldName, value) {
        this.addCondition("EqualTo" /* EQUAL_TO */, fieldName, value);
        return this;
    };
    /**
     * Add notEqualTo condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    CloudDBZoneObjectOperatorConstraint.prototype.notEqualTo = function (fieldName, value) {
        this.addCondition("NotEqualTo" /* NOT_EQUAL_TO */, fieldName, value);
        return this;
    };
    /**
     * Add greaterThan condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    CloudDBZoneObjectOperatorConstraint.prototype.greaterThan = function (fieldName, value) {
        this.addCondition("GreaterThan" /* GREATER_THAN */, fieldName, value);
        return this;
    };
    /**
     * Add greaterThanOrEqualTo condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    CloudDBZoneObjectOperatorConstraint.prototype.greaterThanOrEqualTo = function (fieldName, value) {
        this.addCondition("GreaterThanOrEqualTo" /* GREATER_THAN_OR_EQUAL_TO */, fieldName, value);
        return this;
    };
    /**
     * Add lessThan condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    CloudDBZoneObjectOperatorConstraint.prototype.lessThan = function (fieldName, value) {
        this.addCondition("LessThan" /* LESS_THAN */, fieldName, value);
        return this;
    };
    /**
     * Add lessThanOrEqualTo condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    CloudDBZoneObjectOperatorConstraint.prototype.lessThanOrEqualTo = function (fieldName, value) {
        this.addCondition("LessThanOrEqualTo" /* LESS_THAN_OR_EQUAL_TO */, fieldName, value);
        return this;
    };
    /**
     * Add in condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param values The value array of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    CloudDBZoneObjectOperatorConstraint.prototype.in = function (fieldName, values) {
        this.addCondition("In" /* IN */, fieldName, values);
        return this;
    };
    /**
     * Add isNull condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    CloudDBZoneObjectOperatorConstraint.prototype.isNull = function (fieldName) {
        this.addCondition("IsNull" /* IS_NULL */, fieldName);
        return this;
    };
    /**
     * Add isNotNull condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    CloudDBZoneObjectOperatorConstraint.prototype.isNotNull = function (fieldName) {
        this.addCondition("IsNotNull" /* IS_NOT_NULL */, fieldName);
        return this;
    };
    CloudDBZoneObjectOperatorConstraint.prototype.getConditions = function () {
        return this.conditions;
    };
    CloudDBZoneObjectOperatorConstraint.prototype.getClazz = function () {
        return this.clazz;
    };
    CloudDBZoneObjectOperatorConstraint.prototype.addCondition = function (conditionType, fieldName, value) {
        var conditionObject = {};
        conditionObject.fieldName = fieldName;
        conditionObject.conditionType = conditionType;
        conditionObject.value = value;
        this.conditionValidate.checkCondition(conditionObject);
        this.conditions.push(conditionObject);
        ConditionValidate_1.ConditionValidate.checkConditionLen(this.conditions);
    };
    return CloudDBZoneObjectOperatorConstraint;
}());
exports.CloudDBZoneObjectOperatorConstraint = CloudDBZoneObjectOperatorConstraint;
