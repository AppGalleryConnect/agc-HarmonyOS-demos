"use strict";
/**
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.CloudDBZoneObjectOperator = void 0;
var AGConnectCloudDBException_1 = require("../exception/AGConnectCloudDBException");
var CloudDBErrorCode_1 = require("../exception/CloudDBErrorCode");
var DataModelHelper_1 = require("../utils/DataModelHelper");
var Utils_1 = require("../utils/Utils");
var ErrorCodeMessage_1 = require("../exception/ErrorCodeMessage");
/**
 * operate object.
 */
var CloudDBZoneObjectOperator = /** @class */ (function () {
    function CloudDBZoneObjectOperator(object) {
        this.incrementMap = new Map();
        this.updateMap = new Map();
        this.object = object;
    }
    /**
     * build `CloudDBZoneObjectOperator` instance of object.
     *
     * @param object an instance of object type object.
     * @returns The `CloudDBZoneObjectOperator` instance of object.
     */
    CloudDBZoneObjectOperator.build = function (object) {
        if (!object || !Utils_1.Utils.isObjectValid(object)) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.OBJECT_IS_INVALID).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.OBJECT_IS_INVALID);
        }
        DataModelHelper_1.DataModelHelper.checkPrimaryKeys(object);
        return new CloudDBZoneObjectOperator(object);
    };
    /**
     * increment field
     *
     * @param fieldName the field need to increment
     * @param delta the increment of field
     */
    CloudDBZoneObjectOperator.prototype.increment = function (fieldName, delta) {
        if (this.incrementMap.has(fieldName) || this.updateMap.has(fieldName)) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.DUPLICATE_FIELD));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DUPLICATE_FIELD);
        }
        DataModelHelper_1.DataModelHelper.checkOperatorField(fieldName, delta, this.object, true);
        this.incrementMap.set(fieldName, delta);
        return this;
    };
    /**
     * update field
     *
     * @param fieldName the field need to update
     * @param value the value of field
     */
    CloudDBZoneObjectOperator.prototype.update = function (fieldName, value) {
        if (this.incrementMap.has(fieldName) || this.updateMap.has(fieldName)) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.DUPLICATE_FIELD));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DUPLICATE_FIELD);
        }
        DataModelHelper_1.DataModelHelper.checkOperatorField(fieldName, value, this.object);
        this.updateMap.set(fieldName, value);
        return this;
    };
    CloudDBZoneObjectOperator.prototype.getObject = function () {
        return this.object;
    };
    CloudDBZoneObjectOperator.prototype.getIncrementMap = function () {
        return this.incrementMap;
    };
    CloudDBZoneObjectOperator.prototype.getUpdateMap = function () {
        return this.updateMap;
    };
    return CloudDBZoneObjectOperator;
}());
exports.CloudDBZoneObjectOperator = CloudDBZoneObjectOperator;
