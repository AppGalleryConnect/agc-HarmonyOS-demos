"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.HttpsCommunicator = void 0;
/**
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 */
var agconnect = __importStar(require("@agconnect/common-server"));
var CloudDBSdkUtils_1 = require("../../utils/CloudDBSdkUtils");
var RequestHeader_1 = require("./RequestHeader");
var AGConnectCloudDBException_1 = require("../../exception/AGConnectCloudDBException");
var CloudDBErrorCode_1 = require("../../exception/CloudDBErrorCode");
var HttpsCommunicator = /** @class */ (function () {
    function HttpsCommunicator(agcClient) {
        this.maxBodyLength = 30 * 1024 * 1024;
        this.maxContentLength = 30 * 1024 * 1024;
        this.timeout = 0;
        this.requestPort = ':443/';
        this.POST = 'POST';
        this.GET = 'GET';
        this.PUT = 'PUT';
        this.DELETE = 'DELETE';
        this.agcClient = agcClient;
        var credential = this.agcClient.getCredential();
        if (!credential) {
            console.warn(new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.FAIL_TO_GET_CREDENTIAL).message);
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.FAIL_TO_GET_CREDENTIAL);
        }
        var urlWithoutPort = CloudDBSdkUtils_1.CloudDBSdkUtils.getCloudGwUrl(credential.getRegion());
        var backupUrlWithoutPort = CloudDBSdkUtils_1.CloudDBSdkUtils.getCloudGwUrl(credential.getRegion(), true);
        var headers = new RequestHeader_1.RequestHeader(credential.getClientId(), credential.getProjectId());
        this.requestTemplate = {
            url: urlWithoutPort.substring(0, urlWithoutPort.length - 1) + this.requestPort,
            backupUrl: backupUrlWithoutPort.substring(0, backupUrlWithoutPort.length - 1) + this.requestPort,
            headers: headers,
            params: {}
        };
        var httpClientConfig = {
            maxBodyLength: this.maxBodyLength,
            maxContentLength: this.maxContentLength,
            timeout: this.timeout
        };
        this.httpClient = agconnect.getHttpClient(httpClientConfig);
    }
    /**
     * This method is used to send http post request.
     *
     * @param requestUrl the url request is sent to
     * @param requestId the requestId
     * @param data body of the request
     * @param useBackup use backup gw url
     */
    HttpsCommunicator.prototype.sendPostRequest = function (requestUrl, requestId, data, useBackup) {
        return __awaiter(this, void 0, void 0, function () {
            var error_1;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.sendRequest(this.POST, requestId, useBackup, requestUrl, data)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_1 = _a.sent();
                        return [2 /*return*/, Promise.reject(error_1)];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * This method is used to send http delete request.
     *
     * @param requestUrl the url request is sent to
     * @param requestId the requestId
     * @param data the body of the request
     * @param useBackup use backup gw url
     */
    HttpsCommunicator.prototype.sendDeleteRequest = function (requestUrl, requestId, data, useBackup) {
        return __awaiter(this, void 0, void 0, function () {
            var error_2;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.sendRequest(this.DELETE, requestId, useBackup, requestUrl, data)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_2 = _a.sent();
                        return [2 /*return*/, Promise.reject(error_2)];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    /**
     * This method is used to send http put request.
     *
     * @param requestUrl the url request is sent to
     * @param requestId the requestId
     * @param data the body of the request
     * @param useBackup use backup gw url
     */
    HttpsCommunicator.prototype.sendPutRequest = function (requestUrl, requestId, data, useBackup) {
        return __awaiter(this, void 0, void 0, function () {
            var error_3;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.sendRequest(this.PUT, requestId, useBackup, requestUrl, data)];
                    case 1: return [2 /*return*/, _a.sent()];
                    case 2:
                        error_3 = _a.sent();
                        return [2 /*return*/, Promise.reject(error_3)];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    HttpsCommunicator.prototype.sendRequest = function (method, requestId, useBackup, requestUrl, data, params) {
        return __awaiter(this, void 0, void 0, function () {
            var token, realRequestUrl;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0: return [4 /*yield*/, this.generateAuth()];
                    case 1:
                        token = _a.sent();
                        this.requestTemplate.headers.setAuthorization('Bearer ' + token);
                        this.requestTemplate.headers.setRequestId(requestId);
                        realRequestUrl = useBackup
                            ? this.requestTemplate.backupUrl + requestUrl
                            : this.requestTemplate.url + requestUrl;
                        params = params ? params : {};
                        switch (method) {
                            case this.GET:
                                return [2 /*return*/, this.httpClient.get(realRequestUrl, params, this.requestTemplate.headers)];
                            case this.POST:
                                return [2 /*return*/, this.httpClient.post(realRequestUrl, data, params, this.requestTemplate.headers)];
                            case this.DELETE:
                                return [2 /*return*/, this.httpClient.delete(realRequestUrl, data, params, this.requestTemplate.headers)];
                            case this.PUT:
                                return [2 /*return*/, this.httpClient.put(realRequestUrl, data, params, this.requestTemplate.headers)];
                            default:
                                return [2 /*return*/, Promise.reject(new TypeError('Not support the type of request.'))];
                        }
                        return [2 /*return*/];
                }
            });
        });
    };
    HttpsCommunicator.prototype.generateAuth = function () {
        return __awaiter(this, void 0, void 0, function () {
            var token, error_4;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        _a.trys.push([0, 2, , 3]);
                        return [4 /*yield*/, this.agcClient.getCredential().getAccessToken()];
                    case 1:
                        token = _a.sent();
                        return [2 /*return*/, Promise.resolve(token)];
                    case 2:
                        error_4 = _a.sent();
                        return [2 /*return*/, Promise.reject(error_4)];
                    case 3: return [2 /*return*/];
                }
            });
        });
    };
    return HttpsCommunicator;
}());
exports.HttpsCommunicator = HttpsCommunicator;
