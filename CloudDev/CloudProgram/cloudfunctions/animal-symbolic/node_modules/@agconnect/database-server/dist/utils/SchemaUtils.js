"use strict";
/**
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FieldType = void 0;
var FieldType;
(function (FieldType) {
    FieldType[FieldType["Boolean"] = 1] = "Boolean";
    FieldType[FieldType["Byte"] = 2] = "Byte";
    FieldType[FieldType["Short"] = 3] = "Short";
    FieldType[FieldType["Integer"] = 4] = "Integer";
    FieldType[FieldType["Long"] = 5] = "Long";
    FieldType[FieldType["Float"] = 6] = "Float";
    FieldType[FieldType["Double"] = 7] = "Double";
    FieldType[FieldType["ByteArray"] = 8] = "ByteArray";
    FieldType[FieldType["String"] = 9] = "String";
    FieldType[FieldType["Date"] = 10] = "Date";
    FieldType[FieldType["Text"] = 11] = "Text";
    FieldType[FieldType["UNKNOWN"] = 12] = "UNKNOWN";
    FieldType[FieldType["IntAutoIncrement"] = 13] = "IntAutoIncrement";
    FieldType[FieldType["LongAutoIncrement"] = 14] = "LongAutoIncrement";
})(FieldType || (FieldType = {}));
exports.FieldType = FieldType;
(function (FieldType) {
    function getFieldType(type) {
        switch (type) {
            case 'Boolean':
                return FieldType.Boolean;
            case 'Byte':
                return FieldType.Byte;
            case 'Short':
                return FieldType.Short;
            case 'Integer':
                return FieldType.Integer;
            case 'Long':
                return FieldType.Long;
            case 'Float':
                return FieldType.Float;
            case 'Double':
                return FieldType.Double;
            case 'ByteArray':
                return FieldType.ByteArray;
            case 'String':
                return FieldType.String;
            case 'Date':
                return FieldType.Date;
            case 'Text':
                return FieldType.Text;
            case 'IntAutoIncrement':
                return FieldType.IntAutoIncrement;
            case 'LongAutoIncrement':
                return FieldType.LongAutoIncrement;
            default:
                return FieldType.UNKNOWN;
        }
    }
    FieldType.getFieldType = getFieldType;
    function valueOf(type) {
        return type;
    }
    FieldType.valueOf = valueOf;
})(FieldType || (FieldType = {}));
exports.FieldType = FieldType;
