"use strict";
/**
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 */
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
Object.defineProperty(exports, "__esModule", { value: true });
exports.AGConnectCloudDB = void 0;
var __1 = require("..");
var CloudDBErrorCode_1 = require("../exception/CloudDBErrorCode");
var CloudDBService_1 = require("./CloudDBService");
/**
 * AGConnectCloudDB interface.
 */
var AGConnectCloudDB = /** @class */ (function (_super) {
    __extends(AGConnectCloudDB, _super);
    function AGConnectCloudDB(agcClient) {
        var _this = _super.call(this, agcClient) || this;
        _this.USER_KEY = 'v3/userKey';
        _this.UID_MAX_SIZE = 100;
        return _this;
    }
    /**
     * If the AGConnectCloudDB has not been instantiated,
     * the singleton AGConnectCloudDB will be instantiated with AgcClient.
     *
     * @param agcClient client from Agc.
     * @throws AGConnectCloudDBException if agcClient is null.
     */
    AGConnectCloudDB.initialize = function (agcClient) {
        if (!agcClient) {
            console.warn(new __1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.VALUE_IS_NULL).message);
            throw new __1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.VALUE_IS_NULL);
        }
        var region = agcClient.getCredential().getRegion();
        if (!AGConnectCloudDB.agconnectMultiCloudDB.get(region)) {
            this.agconnectMultiCloudDB.set(region, new AGConnectCloudDB(agcClient));
        }
    };
    /**
     * The AGConnectCloudDB is returned if it has been instantiated, else will throw an exception.
     *
     * @returns The singleton AGConnectCloudDB.
     * @throws AGConnectCloudDBException if AGConnectCloudDB has not been instantiated.
     */
    AGConnectCloudDB.getInstance = function (agcClient) {
        if (AGConnectCloudDB.agconnectMultiCloudDB.size === 0) {
            console.warn(new __1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.AGCONNECT_CLOUDDB_NOT_INITIALIZE).message);
            throw new __1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.AGCONNECT_CLOUDDB_NOT_INITIALIZE);
        }
        var agconnectCloudDB = AGConnectCloudDB.agconnectMultiCloudDB.get(agcClient.getCredential().getRegion());
        if (!agconnectCloudDB) {
            console.warn(new __1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.AGCONNECT_CLOUDDB_NOT_INITIALIZE).message);
            throw new __1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.AGCONNECT_CLOUDDB_NOT_INITIALIZE);
        }
        return agconnectCloudDB;
    };
    /**
     * open a CloudDBZone - create it if non existing, return its info if already exists.
     *
     * @param zoneConfig the CloudDBZoneConfig which contains the cloudDBZoneName.
     * @returns CloudDBZone.
     * @throws AGConnectCloudDBException if config is null.
     */
    AGConnectCloudDB.prototype.openCloudDBZone = function (zoneConfig) {
        if (!zoneConfig) {
            console.warn(new __1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.VALUE_IS_NULL).message);
            throw new __1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.VALUE_IS_NULL);
        }
        return new __1.CloudDBZone(this.agcClient, zoneConfig);
    };
    /**
     * developers use this API to delete userKey according to userId.
     *
     * @param uid the userId that userKey belongs to.
     * @returns promise with number.
     * @throws AGConnectCloudDBException if uid is invalid.
     */
    AGConnectCloudDB.prototype.executeDeleteUserKey = function (uid) {
        if (!uid) {
            console.warn(new __1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.VALUE_IS_NULL).message);
            return Promise.reject(new __1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.VALUE_IS_NULL));
        }
        if (uid.length > this.UID_MAX_SIZE) {
            console.warn(new __1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.USERID_IS_INVALID).message);
            return Promise.reject(new __1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.USERID_IS_INVALID));
        }
        var requestUrl = this.URL_PREFIX + this.USER_KEY;
        var data = {
            'userId': uid
        };
        return this.objectDeleteResponse(requestUrl, data);
    };
    AGConnectCloudDB.agconnectMultiCloudDB = new Map();
    return AGConnectCloudDB;
}(CloudDBService_1.CloudDBService));
exports.AGConnectCloudDB = AGConnectCloudDB;
