"use strict";
/**
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 */
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.DataModelHelper = exports.Validators = exports.Calculators = void 0;
var Utils_1 = require("./Utils");
var SchemaUtils_1 = require("./SchemaUtils");
var ErrorCodeMessage_1 = require("../exception/ErrorCodeMessage");
var CloudDBErrorCode_1 = require("../exception/CloudDBErrorCode");
var AGConnectCloudDBException_1 = require("../exception/AGConnectCloudDBException");
var INTEGER_MIN_VALUE = -2147483648;
var INTEGER_MAX_VALUE = 2147483647;
var AUTO_INT_MIN_VALUE = 1;
var AUTO_INT_MAX_VALUE = 2147483647;
var SHORT_MIN_VALUE = -32768;
var SHORT_MAX_VALUE = 32767;
var BYTE_MIN_VALUE = -128;
var BYTE_MAX_VALUE = 127;
var FLOAT_MIN_VALUE = (-(3.402823e+38));
var FLOAT_MAX_VALUE = 3.402823e+38;
var LONG_MIN_VALUE = '-9223372036854775808';
var LONG_MAX_VALUE = '9223372036854775807';
var AUTO_LONG_MIN_VALUE = '1';
var AUTO_LONG_MAX_VALUE = '9223372036854775807';
var INCREMENT_SUPPORT_FIELD_TYPE = [
    'Byte',
    'Short',
    'Integer',
    'Long',
    'Float',
    'Double',
    'IntAutoIncrement',
    'LongAutoIncrement',
];
var MAX_STRING_LENGTH = 200;
exports.Calculators = {};
function addCalculator(type, calculator) {
    exports.Calculators[type] = calculator;
}
function calculateStringUtf8Length(str) {
    var length = 0;
    if (!str) {
        return length;
    }
    for (var i = 0; i < str.length; i++) {
        var code = str.charCodeAt(i);
        length += code >> 11 ? 3 : code >> 7 ? 2 : 1;
    }
    return length;
}
addCalculator(SchemaUtils_1.FieldType.Integer, function (_) { return 4; });
addCalculator(SchemaUtils_1.FieldType.IntAutoIncrement, function (_) { return 4; });
addCalculator(SchemaUtils_1.FieldType.String, function (value) {
    return calculateStringUtf8Length(value);
});
addCalculator(SchemaUtils_1.FieldType.Short, function (_) { return 2; });
addCalculator(SchemaUtils_1.FieldType.Long, function (_) { return 8; });
addCalculator(SchemaUtils_1.FieldType.LongAutoIncrement, function (_) { return 8; });
addCalculator(SchemaUtils_1.FieldType.Boolean, function (_) { return 1; });
addCalculator(SchemaUtils_1.FieldType.Byte, function (_) { return 1; });
addCalculator(SchemaUtils_1.FieldType.Float, function (_) { return 4; });
addCalculator(SchemaUtils_1.FieldType.Double, function (_) { return 8; });
addCalculator(SchemaUtils_1.FieldType.ByteArray, function (value) { return value ? value.byteLength : 0; });
addCalculator(SchemaUtils_1.FieldType.Date, function (_) { return 8; });
addCalculator(SchemaUtils_1.FieldType.Text, function (text) {
    return calculateStringUtf8Length(text);
});
exports.Validators = {};
function addValidator(type, validator) {
    exports.Validators[type] = validator;
}
function isNumber(obj) {
    return typeof obj === 'number' && !isNaN(obj);
}
addValidator(SchemaUtils_1.FieldType.Byte, function (value) {
    return !((!Number.isSafeInteger(value)) || value < BYTE_MIN_VALUE || value > BYTE_MAX_VALUE);
});
addValidator(SchemaUtils_1.FieldType.Short, function (value) {
    return !((!Number.isSafeInteger(value)) || value < SHORT_MIN_VALUE || value > SHORT_MAX_VALUE);
});
addValidator(SchemaUtils_1.FieldType.Integer, function (value) {
    return !((!Number.isInteger(value)) || value < INTEGER_MIN_VALUE || value > INTEGER_MAX_VALUE);
});
addValidator(SchemaUtils_1.FieldType.IntAutoIncrement, function (value) {
    return !((!Number.isInteger(value)) || value < AUTO_INT_MIN_VALUE || value > AUTO_INT_MAX_VALUE);
});
addValidator(SchemaUtils_1.FieldType.Long, function (value) {
    return (typeof value === 'number' || typeof value === 'string')
        && Utils_1.Utils.longCompareTo(value.toString(), LONG_MIN_VALUE) >= 0
        && Utils_1.Utils.longCompareTo(value.toString(), LONG_MAX_VALUE) <= 0;
});
addValidator(SchemaUtils_1.FieldType.LongAutoIncrement, function (value) {
    return (typeof value === 'number' || typeof value === 'string')
        && Utils_1.Utils.longCompareTo(value.toString(), AUTO_LONG_MIN_VALUE) >= 0
        && Utils_1.Utils.longCompareTo(value.toString(), AUTO_LONG_MAX_VALUE) <= 0;
});
addValidator(SchemaUtils_1.FieldType.Float, function (value) {
    if (!isNumber(value)) {
        return false;
    }
    return !(isNaN(value) || value < FLOAT_MIN_VALUE || value > FLOAT_MAX_VALUE);
});
addValidator(SchemaUtils_1.FieldType.Double, function (value) {
    return !(typeof value !== 'number' || !Number.isFinite(value));
});
addValidator(SchemaUtils_1.FieldType.String, function (value) {
    return typeof value === 'string' && value.length <= MAX_STRING_LENGTH;
});
addValidator(SchemaUtils_1.FieldType.Text, function (value) {
    return typeof value === 'string';
});
addValidator(SchemaUtils_1.FieldType.Boolean, function (value) {
    return typeof value === 'boolean';
});
addValidator(SchemaUtils_1.FieldType.ByteArray, function (value) {
    return value instanceof Uint8Array;
});
addValidator(SchemaUtils_1.FieldType.Date, function (value) {
    return value instanceof Date && !isNaN(value.getTime());
});
addValidator(SchemaUtils_1.FieldType.UNKNOWN, function () {
    return false;
});
/**
 * Processing data verification
 *
 * @since 2020-11-30
 */
var DataModelHelper = /** @class */ (function () {
    function DataModelHelper() {
    }
    DataModelHelper.calculateObject = function (object) {
        var e_1, _a, e_2, _b;
        if (!Utils_1.Utils.isNotNullObject(object)) {
            throw new TypeError('object is not valid data model object!');
        }
        var fieldTypeMap = object.getFieldTypeMap();
        var properties = Object.getOwnPropertyNames(object);
        var memorySize = 0;
        try {
            for (var properties_1 = __values(properties), properties_1_1 = properties_1.next(); !properties_1_1.done; properties_1_1 = properties_1.next()) {
                var key = properties_1_1.value;
                var fieldType = SchemaUtils_1.FieldType.getFieldType(fieldTypeMap.get(key));
                var size = exports.Calculators[fieldType] ? exports.Calculators[fieldType](object[key])
                    : ('' + object[key]).length;
                memorySize += size;
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (properties_1_1 && !properties_1_1.done && (_a = properties_1.return)) _a.call(properties_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
        try {
            for (var _c = __values(fieldTypeMap.entries()), _d = _c.next(); !_d.done; _d = _c.next()) {
                var _e = __read(_d.value, 1), fieldName = _e[0];
                var fieldType = SchemaUtils_1.FieldType.getFieldType(fieldTypeMap.get(fieldName));
                if (properties.includes(fieldName) || (!exports.Calculators[fieldType] || fieldType === SchemaUtils_1.FieldType.Text
                    || fieldType === SchemaUtils_1.FieldType.String || fieldType === SchemaUtils_1.FieldType.ByteArray)) {
                    continue;
                }
                var size = exports.Calculators[fieldType](undefined);
                memorySize += size;
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_d && !_d.done && (_b = _c.return)) _b.call(_c);
            }
            finally { if (e_2) throw e_2.error; }
        }
        return memorySize;
    };
    DataModelHelper.validate = function (object, isQuery) {
        var e_3, _a;
        if (!Utils_1.Utils.isNotNullObject(object)) {
            throw new TypeError('object is not valid data model object!');
        }
        var properties = Object.getOwnPropertyNames(object);
        var fieldTypeMap = object.getFieldTypeMap();
        if (Utils_1.Utils.isNullOrUndefined(properties) || Utils_1.Utils.isNullOrUndefined(fieldTypeMap)) {
            return false;
        }
        try {
            for (var properties_2 = __values(properties), properties_2_1 = properties_2.next(); !properties_2_1.done; properties_2_1 = properties_2.next()) {
                var name = properties_2_1.value;
                var typeStr = fieldTypeMap.get(name);
                if (!typeStr) {
                    return false;
                }
                var value = object[name];
                if (value === undefined || value === null) {
                    continue;
                }
                if (isQuery) {
                    if (!this.validateQueryFieldValue(typeStr, value)) {
                        return false;
                    }
                    continue;
                }
                if (!this.validateFieldValue(typeStr, value)) {
                    return false;
                }
            }
        }
        catch (e_3_1) { e_3 = { error: e_3_1 }; }
        finally {
            try {
                if (properties_2_1 && !properties_2_1.done && (_a = properties_2.return)) _a.call(properties_2);
            }
            finally { if (e_3) throw e_3.error; }
        }
        return true;
    };
    DataModelHelper.validateFieldValue = function (fieldType, value) {
        if (SchemaUtils_1.FieldType.getFieldType(fieldType) === SchemaUtils_1.FieldType.UNKNOWN) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.INVALID_FIELD_TYPE));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INVALID_FIELD_TYPE);
        }
        return exports.Validators[SchemaUtils_1.FieldType.getFieldType(fieldType)](value);
    };
    DataModelHelper.validateQueryFieldValue = function (fieldType, value) {
        if (SchemaUtils_1.FieldType.getFieldType(fieldType) === SchemaUtils_1.FieldType.IntAutoIncrement) {
            fieldType = 'Integer';
        }
        if (SchemaUtils_1.FieldType.getFieldType(fieldType) === SchemaUtils_1.FieldType.LongAutoIncrement) {
            fieldType = 'Long';
        }
        return this.validateFieldValue(fieldType, value);
    };
    DataModelHelper.checkPrimaryKeys = function (object) {
        var e_4, _a;
        var primaryKeys = object.getPrimaryKeyList();
        var fieldTypeMap = object.getFieldTypeMap();
        if (!primaryKeys || primaryKeys.length === 0) {
            throw new TypeError('There is at least one primary key.');
        }
        try {
            for (var primaryKeys_1 = __values(primaryKeys), primaryKeys_1_1 = primaryKeys_1.next(); !primaryKeys_1_1.done; primaryKeys_1_1 = primaryKeys_1.next()) {
                var primaryKey = primaryKeys_1_1.value;
                if (!object[primaryKey]) {
                    console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.PRIMARY_KEY_REQUIRED));
                    throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PRIMARY_KEY_REQUIRED);
                }
                if (!DataModelHelper.validateFieldValue(fieldTypeMap.get(primaryKey), object[primaryKey])) {
                    console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_CODE_DATA_INVALID));
                    throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_CODE_DATA_INVALID);
                }
            }
        }
        catch (e_4_1) { e_4 = { error: e_4_1 }; }
        finally {
            try {
                if (primaryKeys_1_1 && !primaryKeys_1_1.done && (_a = primaryKeys_1.return)) _a.call(primaryKeys_1);
            }
            finally { if (e_4) throw e_4.error; }
        }
    };
    DataModelHelper.checkOperatorField = function (fieldName, value, object, isIncrement) {
        var fieldTypeMap = object.getFieldTypeMap();
        var encryptedFields = object.getEncryptedFieldList();
        var primaryKeys = object.getPrimaryKeyList();
        if (!fieldTypeMap.has(fieldName)) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.FIELD_NOT_EXIST));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.FIELD_NOT_EXIST);
        }
        if (primaryKeys.includes(fieldName) || encryptedFields.includes(fieldName)) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.PRIMARY_KEY_ENCRYPTED_FIELD_CANNOT_BE_UPDATED));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.PRIMARY_KEY_ENCRYPTED_FIELD_CANNOT_BE_UPDATED);
        }
        var fieldType = fieldTypeMap.get(fieldName);
        if (!fieldType) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.INVALID_FIELD_TYPE));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INVALID_FIELD_TYPE);
        }
        if (isIncrement && !INCREMENT_SUPPORT_FIELD_TYPE.includes(fieldType)) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.INCREMENTAL_FIELD_ONLY_SUPPORT_NUMERIC));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INCREMENTAL_FIELD_ONLY_SUPPORT_NUMERIC);
        }
        // update can set null
        if (!isIncrement && value === null) {
            return;
        }
        if (!DataModelHelper.validateFieldValue(fieldType, value)) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_CODE_DATA_INVALID));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_CODE_DATA_INVALID);
        }
    };
    return DataModelHelper;
}());
exports.DataModelHelper = DataModelHelper;
