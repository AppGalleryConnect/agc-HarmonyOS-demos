/**
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
 */
export declare class CloudDBZoneObjectOperatorConstraint<T> {
    private readonly clazz;
    private readonly conditions;
    private conditionValidate;
    private constructor();
    /**
     * Instantiate a CloudDBZoneObjectOperatorConstraint object.
     *
     * @param clazz The object type class.
     * @returns The `CloudDBZoneObjectOperatorConstraint` instance of clazz.
     */
    static where<T>(clazz: new () => T): CloudDBZoneObjectOperatorConstraint<T>;
    /**
     * Add beginWiths condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    beginsWith(fieldName: string, value: any): CloudDBZoneObjectOperatorConstraint<T>;
    /**
     * Add endsWiths condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    endsWith(fieldName: string, value: any): CloudDBZoneObjectOperatorConstraint<T>;
    /**
     * Add contains condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    contains(fieldName: string, value: any): CloudDBZoneObjectOperatorConstraint<T>;
    /**
     * Add equalTo condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    equalTo(fieldName: string, value: any): CloudDBZoneObjectOperatorConstraint<T>;
    /**
     * Add notEqualTo condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    notEqualTo(fieldName: string, value: any): CloudDBZoneObjectOperatorConstraint<T>;
    /**
     * Add greaterThan condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    greaterThan(fieldName: string, value: any): CloudDBZoneObjectOperatorConstraint<T>;
    /**
     * Add greaterThanOrEqualTo condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    greaterThanOrEqualTo(fieldName: string, value: any): CloudDBZoneObjectOperatorConstraint<T>;
    /**
     * Add lessThan condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    lessThan(fieldName: string, value: any): CloudDBZoneObjectOperatorConstraint<T>;
    /**
     * Add lessThanOrEqualTo condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param value The value of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    lessThanOrEqualTo(fieldName: string, value: any): CloudDBZoneObjectOperatorConstraint<T>;
    /**
     * Add in condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @param values The value array of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    in(fieldName: string, values: any[]): CloudDBZoneObjectOperatorConstraint<T>;
    /**
     * Add isNull condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    isNull(fieldName: string): CloudDBZoneObjectOperatorConstraint<T>;
    /**
     * Add isNotNull condition.
     *
     * @param fieldName The name of the field used for being compared.
     * @returns CloudDBZoneObjectOperatorConstraint itself.
     */
    isNotNull(fieldName: string): CloudDBZoneObjectOperatorConstraint<T>;
    getConditions(): any[];
    getClazz(): new () => T;
    private addCondition;
}
