/**
 * Copyright (c) Huawei Technologies Co., Ltd. 2020-2020. All rights reserved.
 */
/**
 * the utils class.
 */
export declare class Utils {
    private static readonly DATE_REG_EXP;
    private static readonly NUMBER_REG_EXP;
    private static readonly MAX_OBJECT_CAPACITY;
    /**
     * This method is used to check whether the input value is Array.
     *
     * @param value the value that need to check.
     * @returns whether the input is a array.
     */
    static isArray(value: any): boolean;
    /**
     * This method is used to check whether the input value is null or undefined.
     *
     * @param value the value that need to check.
     * @returns whether the input is a null or undefined.
     */
    static isNullOrUndefined(value: any): boolean;
    /**
     * This method is used to check whether the input value is type of object.
     *
     * @param value the value that need to check.
     * @returns whether the input is type of object.
     */
    static isNotNullObject(value: unknown): boolean;
    /**
     * This method is used to serialize objects.
     *
     * @param objects a list of objects.
     * @returns a list of serialized objects.
     */
    static serializeObjects(objects: any[]): any[];
    private static serializeDate;
    /**
     * This method is used to deserialize objects.
     *
     * @param objects a list of objects.
     * @param fieldTypeMap a map of field name and filed type.
     * @param targetClass the class that json string deserializes to.
     * @returns a list of deserialized objects.
     */
    static deserializeObjects(objects: any[], fieldTypeMap: Map<string, string>, targetClass: any): any[];
    private static arrayBufferToBase64;
    private static base64ToArrayBuffer;
    private static isFieldTypeNumber;
    private static deserializeNumber;
    private static deserializeDate;
    /**
     * This method is used to serialize queryConditions.
     *
     * @param queryConditions the input query conditions.
     * @param fieldTypeMap a map of field name and filed type.
     * @returns the serialized queryConditions.
     */
    static serializeQueryConditions(queryConditions: any[], fieldTypeMap: Map<string, string>): any[];
    /**
     * This method is used to check whether the input fieldType is numeric type.
     *
     * @param fieldType the fieldType that needs to check.
     * @returns boolean value of the check result.
     */
    static isNumericField(fieldType: string): boolean;
    /**
     * This method is used to check whether the input class is valid.
     *
     * @param clazz the class that needs to check.
     * @throws throw an AGConnectCloudDBException if the class is invalid.
     */
    static clazzCheck(clazz: any): void;
    /**
     * This method is used to check whether the input object is valid.
     *
     * @param object the object that needs to check.
     * @returns boolean value of the check result.
     */
    static isObjectValid(object: any): boolean;
    private static serializeObject;
    /**
     * This method is used to check whether the input conditionType is aggregate type.
     *
     * @param conditionType the conditionType that needs to check.
     * @returns boolean value of the check result.
     */
    static isAggregateType(conditionType: string): boolean;
    /**
     * This method is used to check whether the input conditionType is pagination type.
     *
     * @param conditionType the conditionType that needs to check.
     * @returns boolean value of the check result.
     */
    static isPaginationType(conditionType: string): boolean;
    /**
     * This method is used to check whether the object list contains different schema
     * and whether the data size is too large.
     *
     * @param objectList the input objectList.
     */
    static checkSchemaAndDataSize(objectList: any[]): void;
    /**
     * This method is used to check whether the object contains illegal character.
     *
     * @param object the object needs to be checked.
     */
    static checkIllegalCharacter(object: any): void;
    static getRequestId(): string;
    static primaryKeyCompareTo(object1: any, object2: any, filedType: string): any;
    static longCompareTo(object1: string, object2: string): number;
    static serializeMapObject(object: any, map: Map<string, any>): Object;
    static deepCopy(objectList: any[]): any[];
}
