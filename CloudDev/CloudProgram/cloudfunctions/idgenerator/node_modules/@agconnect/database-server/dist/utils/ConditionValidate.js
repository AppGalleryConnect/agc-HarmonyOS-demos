"use strict";
/**
 * Copyright (c) Huawei Technologies Co., Ltd. 2022-2022. All rights reserved.
 */
var __read = (this && this.__read) || function (o, n) {
    var m = typeof Symbol === "function" && o[Symbol.iterator];
    if (!m) return o;
    var i = m.call(o), r, ar = [], e;
    try {
        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);
    }
    catch (error) { e = { error: error }; }
    finally {
        try {
            if (r && !r.done && (m = i["return"])) m.call(i);
        }
        finally { if (e) throw e.error; }
    }
    return ar;
};
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
var __values = (this && this.__values) || function(o) {
    var s = typeof Symbol === "function" && Symbol.iterator, m = s && o[s], i = 0;
    if (m) return m.call(o);
    if (o && typeof o.length === "number") return {
        next: function () {
            if (o && i >= o.length) o = void 0;
            return { value: o && o[i++], done: !o };
        }
    };
    throw new TypeError(s ? "Object is not iterable." : "Symbol.iterator is not defined.");
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConditionValidate = void 0;
var AGConnectCloudDBException_1 = require("../exception/AGConnectCloudDBException");
var CloudDBErrorCode_1 = require("../exception/CloudDBErrorCode");
var FieldType_1 = require("./FieldType");
var DataModelHelper_1 = require("./DataModelHelper");
var ErrorCodeMessage_1 = require("../exception/ErrorCodeMessage");
var ConditionValidate = /** @class */ (function () {
    function ConditionValidate(clazz) {
        this.NEED_TO_CHECK_FIELD_NAME = [
            "BeginsWith" /* BEGINS_WITH */, "EndsWith" /* ENDS_WITH */, "Contains" /* CONTAINS */, "EqualTo" /* EQUAL_TO */,
            "NotEqualTo" /* NOT_EQUAL_TO */, "GreaterThan" /* GREATER_THAN */, "GreaterThanOrEqualTo" /* GREATER_THAN_OR_EQUAL_TO */,
            "LessThan" /* LESS_THAN */, "LessThanOrEqualTo" /* LESS_THAN_OR_EQUAL_TO */, "In" /* IN */, "IsNull" /* IS_NULL */,
            "IsNotNull" /* IS_NOT_NULL */, "OrderBy" /* ORDER_BY */
        ];
        this.EMPTY_FN = function () {
        };
        this.UID_MAX_SIZE = 100;
        this.conditionValidators = new Map();
        this.clazz = clazz;
        var object = new clazz();
        this.fieldTypeMap = object.getFieldTypeMap();
        this.encryptedFieldList = object.getEncryptedFieldList();
        this.conditionValidators.set("BeginsWith" /* BEGINS_WITH */, this.validateBeginEndContains);
        this.conditionValidators.set("EndsWith" /* ENDS_WITH */, this.validateBeginEndContains);
        this.conditionValidators.set("Contains" /* CONTAINS */, this.validateBeginEndContains);
        this.conditionValidators.set("EqualTo" /* EQUAL_TO */, this.validateEqualOrNotEqual);
        this.conditionValidators.set("NotEqualTo" /* NOT_EQUAL_TO */, this.validateEqualOrNotEqual);
        this.conditionValidators.set("GreaterThan" /* GREATER_THAN */, this.validateGreaterOrLessThan);
        this.conditionValidators.set("GreaterThanOrEqualTo" /* GREATER_THAN_OR_EQUAL_TO */, this.validateGreaterOrLessThan);
        this.conditionValidators.set("LessThan" /* LESS_THAN */, this.validateGreaterOrLessThan);
        this.conditionValidators.set("LessThanOrEqualTo" /* LESS_THAN_OR_EQUAL_TO */, this.validateGreaterOrLessThan);
        this.conditionValidators.set("In" /* IN */, this.validateIn);
        this.conditionValidators.set("IsNull" /* IS_NULL */, this.EMPTY_FN);
        this.conditionValidators.set("IsNotNull" /* IS_NOT_NULL */, this.EMPTY_FN);
        this.conditionValidators.set("OrderBy" /* ORDER_BY */, this.EMPTY_FN);
        this.conditionValidators.set("Limit" /* LIMIT */, this.validateLimit);
        this.conditionValidators.set("StartAt" /* START_AT */, this.validateTuple);
        this.conditionValidators.set("StartAfter" /* START_AFTER */, this.validateTuple);
        this.conditionValidators.set("EndAt" /* END_AT */, this.validateTuple);
        this.conditionValidators.set("EndBefore" /* END_BEFORE */, this.validateTuple);
        this.conditionValidators.set("Uid" /* UID */, this.validateUid);
    }
    /**
     * check condition
     *
     * @param condition query condition.
     */
    ConditionValidate.prototype.checkCondition = function (condition) {
        if (!condition) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.INVALID_CONDITION));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INVALID_CONDITION);
        }
        var conditionType = condition.conditionType;
        if (this.NEED_TO_CHECK_FIELD_NAME.includes(conditionType)) {
            this.checkFieldName(condition.fieldName);
        }
        var conditionValidator = this.conditionValidators.get(conditionType);
        if (!conditionValidator) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.INVALID_CONDITION));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INVALID_CONDITION);
        }
        conditionValidator.call(this, condition);
    };
    /**
     * check the length of conditions.
     *
     * @param conditions conditions
     */
    ConditionValidate.checkConditionLen = function (conditions) {
        if (conditions.length > ConditionValidate.MAX_CONDITIONS) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.CONDITION_EXCEEDS_LIMIT));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.CONDITION_EXCEEDS_LIMIT);
        }
    };
    ConditionValidate.prototype.validateEqualOrNotEqual = function (condition) {
        var fieldName = condition.fieldName;
        var value = condition.value;
        if (this.fieldTypeMap.get(fieldName) === FieldType_1.FieldType.ByteArray) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.DO_NOT_SUPPORT_BYTEARRAY));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DO_NOT_SUPPORT_BYTEARRAY);
        }
        this.checkFieldValue(fieldName, value);
        this.checkIllegalCharacter(fieldName, value);
    };
    ConditionValidate.prototype.validateBeginEndContains = function (condition) {
        var fieldName = condition.fieldName;
        var value = condition.value;
        this.checkStringAndText(fieldName);
        this.checkFieldValue(fieldName, value);
        this.checkIllegalCharacter(fieldName, value);
    };
    ConditionValidate.prototype.validateGreaterOrLessThan = function (condition) {
        var fieldName = condition.fieldName;
        var value = condition.value;
        this.checkByteArrayAndBoolean(fieldName);
        this.checkFieldValue(fieldName, value);
        this.checkIllegalCharacter(fieldName, value);
    };
    ConditionValidate.prototype.validateIn = function (condition) {
        var fieldName = condition.fieldName;
        var values = condition.value;
        this.checkByteArrayAndBoolean(fieldName);
        this.checkFieldValue.apply(this, __spreadArray([fieldName], __read(values)));
        for (var i = 0; i < values.length; i++) {
            this.checkIllegalCharacter(fieldName, values[i]);
        }
    };
    ConditionValidate.prototype.validateLimit = function (condition) {
        var limitObject = condition.value;
        var count = limitObject.number;
        var offset = limitObject.offset;
        if ((!count && count != 0) || offset === null || (offset !== undefined && isNaN(offset))) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_VALUE_IS_NULL));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_VALUE_IS_NULL);
        }
        if (count < 0 || (offset !== undefined && offset < 0)) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.INPUT_LIMIT_OR_OFFSET_LESS_THAN_ZERO));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INPUT_LIMIT_OR_OFFSET_LESS_THAN_ZERO);
        }
    };
    ConditionValidate.prototype.validateTuple = function (condition) {
        var queryObject = condition.value;
        if (!queryObject) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_QUERY_OBJECT_IS_NULL));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_QUERY_OBJECT_IS_NULL);
        }
        if (!DataModelHelper_1.DataModelHelper.validate(queryObject, true)) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_CODE_DATA_INVALID));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_CODE_DATA_INVALID);
        }
        this.checkObjectIllegalCharacter(queryObject);
    };
    ConditionValidate.prototype.validateUid = function (condition) {
        var uid = condition.value;
        if (!uid) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_VALUE_IS_NULL));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_VALUE_IS_NULL);
        }
        if (uid.length > this.UID_MAX_SIZE) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.USERID_IS_INVALID));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.USERID_IS_INVALID);
        }
    };
    ConditionValidate.prototype.checkStringAndText = function (fieldName) {
        var fieldType = this.fieldTypeMap.get(fieldName);
        if (fieldType !== FieldType_1.FieldType.Text && fieldType !== FieldType_1.FieldType.String) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.ONLY_SUPPORT_TEXT_AND_STRING));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ONLY_SUPPORT_TEXT_AND_STRING);
        }
    };
    ConditionValidate.prototype.checkByteArrayAndBoolean = function (fieldName) {
        var fieldType = this.fieldTypeMap.get(fieldName);
        if (fieldType === FieldType_1.FieldType.Boolean || fieldType === FieldType_1.FieldType.ByteArray) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.DO_NOT_SUPPORT_BYTEARRAY_OR_BOOLEAN));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DO_NOT_SUPPORT_BYTEARRAY_OR_BOOLEAN);
        }
    };
    ConditionValidate.prototype.checkFieldName = function (fieldName) {
        if (!fieldName) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_FIELD_NAME_IS_NULL));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_FIELD_NAME_IS_NULL);
        }
        if (!this.fieldTypeMap.has(fieldName)) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_FIELD_NAME_DO_NOT_EXIST));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_FIELD_NAME_DO_NOT_EXIST);
        }
        if (this.encryptedFieldList.includes(fieldName)) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.ENCRYPTED_FIELD_NOT_SUPPORT_QUERY));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ENCRYPTED_FIELD_NOT_SUPPORT_QUERY);
        }
    };
    ConditionValidate.prototype.checkFieldValue = function (fieldName) {
        var e_1, _a;
        var values = [];
        for (var _i = 1; _i < arguments.length; _i++) {
            values[_i - 1] = arguments[_i];
        }
        var fieldType = this.fieldTypeMap.get(fieldName);
        if (fieldType === FieldType_1.FieldType.ByteArray) {
            console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.DO_NOT_SUPPORT_BYTEARRAY));
            throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.DO_NOT_SUPPORT_BYTEARRAY);
        }
        try {
            for (var values_1 = __values(values), values_1_1 = values_1.next(); !values_1_1.done; values_1_1 = values_1.next()) {
                var value = values_1_1.value;
                if (value === undefined || value === null) {
                    console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_VALUE_IS_NULL));
                    throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.QUERY_INPUT_VALUE_IS_NULL);
                }
                if (!DataModelHelper_1.DataModelHelper.validateQueryFieldValue(fieldType, value)) {
                    console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_CODE_DATA_INVALID));
                    throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.ERROR_CODE_DATA_INVALID);
                }
            }
        }
        catch (e_1_1) { e_1 = { error: e_1_1 }; }
        finally {
            try {
                if (values_1_1 && !values_1_1.done && (_a = values_1.return)) _a.call(values_1);
            }
            finally { if (e_1) throw e_1.error; }
        }
    };
    ConditionValidate.prototype.checkObjectIllegalCharacter = function (object) {
        var e_2, _a;
        var fieldTypeMap = object.getFieldTypeMap();
        try {
            for (var _b = __values(fieldTypeMap.keys()), _c = _b.next(); !_c.done; _c = _b.next()) {
                var key = _c.value;
                this.checkIllegalCharacter(key, object[key]);
            }
        }
        catch (e_2_1) { e_2 = { error: e_2_1 }; }
        finally {
            try {
                if (_c && !_c.done && (_a = _b.return)) _a.call(_b);
            }
            finally { if (e_2) throw e_2.error; }
        }
    };
    ConditionValidate.prototype.checkIllegalCharacter = function (fieldName, value) {
        var fieldType = this.fieldTypeMap.get(fieldName);
        if (fieldType == FieldType_1.FieldType.Text || fieldType == FieldType_1.FieldType.String) {
            if (value == null) {
                return;
            }
            if (value.indexOf('\0') !== -1) {
                console.warn(ErrorCodeMessage_1.getErrorMessage(CloudDBErrorCode_1.CloudDBErrorCode.INPUT_CONTAIN_ILLEGAL_CHARACTER));
                throw new AGConnectCloudDBException_1.AGConnectCloudDBException(CloudDBErrorCode_1.CloudDBErrorCode.INPUT_CONTAIN_ILLEGAL_CHARACTER);
            }
        }
    };
    ConditionValidate.MAX_CONDITIONS = 30;
    return ConditionValidate;
}());
exports.ConditionValidate = ConditionValidate;
